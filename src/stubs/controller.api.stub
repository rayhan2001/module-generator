<?php

namespace App\Http\Controllers;

use App\Repositories\{{studly}}Repository;
use Illuminate\Http\Request;

class {{studly}}Controller extends Controller
{
    public function __construct(
        protected {{studly}}Repository $repository
    ) {}

    public function index(Request $request)
    {
        try {
            $data = $this->repository->paginateData($request);

            return response()->json([
                'status' => 'success',
                'data' => $data
            ], 200);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => $e->getMessage()
            ], 500);
        }
    }

    public function store(Request $request)
    {
        try {
            $this->repository->store($request->all());

            return response()->json([
                'status' => 'success',
                'message' => 'Created successfully',
            ], 201);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => $e->getMessage()
            ], 500);
        }
    }

    public function show($id)
    {
        try {
            $data = $this->repository->find($id);

            return response()->json([
                'status' => 'success',
                'data' => $data
            ], 200);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => $e->getMessage()
            ], 500);
        }
    }

    public function update(Request $request, $id)
    {
        try {
            $this->repository->update($id, $request->all());

            return response()->json([
                'status' => 'success',
                'message' => 'Updated successfully'
            ], 200);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => $e->getMessage()
            ], 500);
        }
    }

    public function destroy($id)
    {
        try {
            $this->repository->delete($id);

            return response()->json([
                'status' => 'success',
                'message' => 'Deleted successfully'
            ], 200);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => $e->getMessage()
            ], 500);
        }
    }
}
